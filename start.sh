#!/bin/bash
set -e

echo "üöÄ Starting FastAPI CrewAI Application..."

# Fun√ß√£o para aguardar o PostgreSQL (se estiver usando PostgreSQL)
wait_for_postgres() {
    if [[ "$DB_URL" == *"postgresql"* ]]; then
        echo "‚è≥ Waiting for PostgreSQL to be ready..."

        # Extrair host e porta do DB_URL
        # Format: postgresql://user:pass@host:port/db
        DB_HOST=$(echo "$DB_URL" | sed -n 's/.*@\([^:]*\):.*/\1/p')
        DB_PORT=$(echo "$DB_URL" | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')

        # Valores padr√£o se n√£o encontrados
        DB_HOST=${DB_HOST:-postgres}
        DB_PORT=${DB_PORT:-5432}

        echo "Verificando conex√£o com $DB_HOST:$DB_PORT..."

        # Aguarde at√© que a porta esteja dispon√≠vel usando netcat ou timeout
        for i in {1..30}; do
            if timeout 1 bash -c "</dev/tcp/$DB_HOST/$DB_PORT" 2>/dev/null; then
                echo "‚úÖ PostgreSQL est√° pronto!"
                return 0
            fi
            echo "‚ùå PostgreSQL ainda n√£o est√° pronto (tentativa $i/30)..."
            sleep 2
        done

        echo "üí• PostgreSQL n√£o ficou pronto a tempo"
        exit 1
    else
        echo "üìÅ Usando banco de dados SQLite - verifica√ß√£o de conex√£o n√£o necess√°ria"
    fi
}

# Aguarde o banco de dados, se necess√°rio
wait_for_postgres

# Execute as migra√ß√µes do banco de dados
echo "üîÑ Executando migra√ß√µes do banco de dados..."
alembic upgrade head

echo "‚úÖ Migra√ß√µes conclu√≠das com sucesso!"

# Inicie a aplica√ß√£o FastAPI com Uvicorn
echo "üåü Iniciando a aplica√ß√£o FastAPI com uvicorn..."
exec uvicorn app.startup:app --host 0.0.0.0 --port 8000 --workers 4
